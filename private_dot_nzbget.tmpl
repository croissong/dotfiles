MainDir=~/Downloads/nzbget
DestDir=${MainDir}/dst
InterDir=${MainDir}/inter
NzbDir=${MainDir}/nzb
QueueDir=${MainDir}/queue
TempDir=${MainDir}/tmp
WebDir=/usr/share/nzbget/webui
ScriptDir=${MainDir}/scripts
LockFile=${MainDir}/nzbget.lock
LogFile=${MainDir}/nzbget.log
ConfigTemplate=/usr/share/nzbget/nzbget.conf

RequiredDir=
CertStore=

##############################################################################
### NEWS-SERVERS                                                           ###

Server1.Active=yes
Server1.Name=frugal
Server1.Level=0
Server1.Optional=no
Server1.Group=0
Server1.Host=news.frugalusenet.com
Server1.Port=563
Server1.Username={{ secretJSON | dig "nzbget" "username" "" }}
Server1.Password={{ secretJSON | dig "nzbget" "password" "" }}
Server1.JoinGroup=no
Server1.Encryption=yes
Server1.Cipher=
Server1.Connections=4
Server1.Retention=0
Server1.IpVersion=ipv4
Server1.Notes=


##############################################################################
### SECURITY                                                               ###

ControlIP=127.0.0.1
ControlPort=6789
ControlPassword=
RestrictedUsername=
RestrictedPassword=
AddUsername=
AddPassword=
FormAuth=no
SecureControl=no
SecurePort=6791
SecureCert=
SecureKey=
AuthorizedIP=
CertCheck=no
UpdateCheck=stable
DaemonUsername=root
UMask=1000

##############################################################################
### RSS FEEDS                                                              ###


##############################################################################
### INCOMING NZBS                                                          ###

AppendCategoryDir=no
NzbDirInterval=5
NzbDirFileAge=60
DupeCheck=yes


##############################################################################
### DOWNLOAD QUEUE                                                         ###

FlushQueue=yes
ContinuePartial=yes
PropagationDelay=0
ArticleCache=0
DirectWrite=yes
WriteBuffer=0
FileNaming=auto
ReorderFiles=yes
PostStrategy=balanced
DiskSpace=250
NzbCleanupDisk=yes
KeepHistory=30
FeedHistory=7
SkipWrite=no
RawArticle=no


##############################################################################
### CONNECTION                                                             ###

ArticleRetries=3
ArticleInterval=10
ArticleTimeout=60
UrlRetries=3
UrlInterval=10
UrlTimeout=60
RemoteTimeout=90
DownloadRate=0
UrlConnections=4
UrlForce=yes
MonthlyQuota=0
QuotaStartDay=1
DailyQuota=0


##############################################################################
### LOGGING                                                                ###

# How to use log file (none, append, reset, rotate).
#
#  none   - do not write into log file;
#  append - append to the existing log file or create it;
#  reset  - delete existing log file on program start and create a new one;
#  rotate - create new log file for each day, delete old files,
#           see option <RotateLog>.
WriteLog=append

# Log file rotation period (days).
#
# Defines how long to keep old log-files, when log rotation is active
# (option <WriteLog> is set to "rotate").
RotateLog=3

# How error messages must be printed (screen, log, both, none).
ErrorTarget=both

# How warning messages must be printed (screen, log, both, none).
WarningTarget=both

# How info messages must be printed (screen, log, both, none).
InfoTarget=both

# How detail messages must be printed (screen, log, both, none).
DetailTarget=log

# How debug messages must be printed (screen, log, both, none).
#
# Debug-messages can be printed only if the program was compiled in
# debug-mode: "./configure --enable-debug".
DebugTarget=log

# Number of messages stored in screen buffer (messages).
LogBuffer=1000

# Create log for each downloaded nzb-file (yes, no).
#
# The messages are saved for each download separately and can be viewed
# at any time in download details dialog or history details dialog.
NzbLog=yes

# Print call stack trace into log on program crash (Linux and Windows) (yes, no).
#
# Call stack traces are very helpful for debugging. Call stack traces can be
# printed only when the program was compiled in debug mode.
CrashTrace=yes

# Save memory dump into disk on program crash (Linux only) (yes, no).
#
# Memory dumps (core-files) are very helpful for debugging, especially if
# they were produced by the program compiled in debug mode.
#
# NOTE: Memory dumps may contain sensitive data, like your login/password
# to news-server etc.
CrashDump=no

# Local time correction (hours or minutes).
#
# The option allows to adjust timestamps when converting system time to
# local time and vice versa. The conversion is used when printing messages
# to the log-file and by option "TaskX.Time" in the scheduler settings.
#
# The option is usually not needed if the time zone is set up correctly.
# However, sometimes, especially when using a binary compiled on another
# platform (cross-compiling) the conversion between system and local time
# may not work properly and requires adjustment.
#
# Values in the range -24..+24 are interpreted as hours, other values as minutes.
#  Example 1: set time correction to one hour: TimeCorrection=1;
#  Example 2: set time correction to one hour and a half: TimeCorrection=90.
TimeCorrection=0


##############################################################################
### DISPLAY (TERMINAL)                                                     ###

# Set screen-outputmode (loggable, colored, curses).
#
# loggable - only messages will be printed to standard output;
# colored  - prints messages (with simple coloring for messages categories)
#            and download progress info; uses escape-sequences to move cursor;
# curses   - advanced interactive interface with the ability to edit
#            download queue and various output option.
OutputMode=curses

# Shows NZB-Filename in file list in curses-outputmode (yes, no).
#
# This option controls the initial state of curses-frontend,
# it can be switched on/off in run-time with Z-key.
CursesNzbName=yes

# Show files in groups (NZB-files) in queue list in curses-outputmode (yes, no).
#
# This option controls the initial state of curses-frontend,
# it can be switched on/off in run-time with G-key.
CursesGroup=no

# Show timestamps in message list in curses-outputmode (yes, no).
#
# This option controls the initial state of curses-frontend,
# it can be switched on/off in run-time with T-key.
CursesTime=no

# Update interval for Frontend-output in console mode or remote client
# mode (milliseconds).
#
# Min value 25. Bigger values reduce CPU usage (especially in curses-outputmode)
# and network traffic in remote-client mode.
UpdateInterval=200


##############################################################################
### SCHEDULER                                                              ###

# Time to execute the command (HH:MM).
#
# Multiple comma-separated values are accepted.
# An asterisk placed in the hours location will run task every hour (e. g. "*:00").
# An asterisk without minutes will run task at program startup (e. g. "*").
#
# Examples: "08:00", "00:00,06:00,12:00,18:00", "*:00", "*,*:00,*:30".
#
# NOTE: Also see option <TimeCorrection>.
#Task1.Time=08:00

# Week days to execute the command (1-7).
#
# Comma separated list of week days numbers.
# 1 is Monday.
# Character '-' may be used to define ranges.
#
# Examples: "1-7", "1-5", "5,6", "1-5, 7".
#Task1.WeekDays=1-7

# Command to be executed (PauseDownload, UnpauseDownload, PausePostProcess,
# UnpausePostProcess, PauseScan, UnpauseScan, DownloadRate, Script, Process,
# ActivateServer, DeactivateServer, FetchFeed).
#
# Possible commands:
#   PauseDownload      - pause download;
#   UnpauseDownload    - resume download;
#   PausePostProcess   - pause post-processing;
#   UnpausePostProcess - resume post-processing;
#   PauseScan          - pause scan of incoming nzb-directory;
#   UnpauseScan        - resume scan of incoming nzb-directory;
#   DownloadRate       - set download rate limit;
#   Script             - execute one or multiple scheduler scripts. The scripts
#                        must be written specially for NZBGet;
#   Process            - execute an external (any) program;
#   ActivateServer     - activate news-server;
#   DeactivateServer   - deactivate news-server;
#   FetchFeed          - fetch RSS feed.
#
# On start the program checks all tasks and determines current state
# for download-pause, scan-pause, download-rate and active servers.
#Task1.Command=PauseDownload

# Parameters for the command if needed.
#
# Some scheduler commands require additional parameters:
#  DownloadRate     - download rate limit to be set (kilobytes/sec).
#                     Example: 1000.
#                     NOTE: use value "0" to disable download limit (unlimited speed).
#  Script           - list of scheduler scripts to execute. The scripts in the
#                     list must be separated with commas or semicolons. All
#                     scripts must be stored in directory set by option
#                     <ScriptDir> and paths relative to <ScriptDir> must be
#                     entered here. For developer documentation visit
#                     http://nzbget.net/extension-scripts;
#  Process          - path to the program to execute and its parameters.
#                     Example: /home/user/fetch.sh.
#                     If filename or any parameter contains spaces it
#                     must be surrounded with single quotation
#                     marks. If filename/parameter contains single quotation marks,
#                     each of them must be replaced (escaped) with two single quotation
#                     marks and the resulting filename/parameter must be
#                     surrounded with single quotation marks.
#                     Example: '/home/user/download/my scripts/task process.sh' 'world''s fun'.
#                     In this example one parameter (world's fun) is passed
#                     to the script (task process.sh).
#  ActivateServer   - comma separated list of news server ids or server names.
#                     Example: 1,3.
#                     Example: my news server 1, my news server 2.
#                     NOTE: server names should not have commas.
#  DeactivateServer - see ActivateServer.
#  FetchFeed        - comma separated list of RSS feed ids or feed names.
#                     Example: 1,3.
#                     Example: bookmarks feed, another feed.
#                     NOTE: feed names should not have commas.
#                     NOTE: use feed id "0" to fetch all feeds.
#Task1.Param=

#Task2.Time=20:00
#Task2.WeekDays=1-7
#Task2.Command=UnpauseDownload
#Task2.Param=


##############################################################################
### CHECK AND REPAIR                                                       ###

# Check CRC of downloaded and decoded articles (yes, no).
#
# Normally this option should be enabled for better detecting of download
# errors and for quick par-verification (option <ParQuick>).
CrcCheck=yes

# Whether and how par-verification must be performed (auto, always, force, manual).
#
#  Auto   - par-check is performed when needed. One par2-file is always
#           downloaded. Additional par2-files are downloaded if needed
#           for repair. Repair is performed if the option <ParRepair>
#           is enabled;
#  Always - check every download (even undamaged). One par2-file is
#           always downloaded. Additional par2-files are downloaded
#           if needed for repair.  Repair is performed if the option
#           <ParRepair> is enabled;
#  Force  - force par-check for every download (even undamaged). All
#           par2-files are always downloaded. Repair is performed if
#           the option <ParRepair> is enabled;
#  Manual - par-check is skipped. One par2-file is always
#           downloaded. If a damaged download is detected, all
#           par2-files are downloaded but neither par-check nor par-repair
#           take place. The download can be then repaired manually,
#           eventually on another faster computer.
ParCheck=auto

# Automatic par-repair after par-verification (yes, no).
#
# If option <ParCheck> is set to "Auto" or "Force" this option defines
# if the download must be repaired when needed. The option can be
# disabled if a computer does not have enough CPU power, since repairing
# may consume too many resources and time on a slow computer.
ParRepair=yes

# What files should be scanned during par-verification (limited, extended,
# full, dupe).
#
#  Limited  - scan only files belonging to par-set;
#  Extended - scan files belonging to par-set first, scan other files until
#             all missing files are found;
#  Full     - scan all files in destination directory. Can be very time
#             consuming but may sometimes repair where Limited and Extended fail;
#  Dupe     - scan files belonging to par-set first, scan other files until
#             repair is possible. Even files from other duplicate-downloads
#             are scanned. Can be very time consuming but brings best results.
ParScan=extended

# Quick file verification during par-check (yes, no).
#
# If the option is active the files are quickly verified using
# checksums calculated during download; quick verification is very fast
# because it doesn't require the reading of files from disk, NZBGet
# knows checksums of downloaded files and quickly compares them with
# checksums stored in the par-file.
#
# If the option is disabled the files are verified as usual. That's
# slow. Use this if the quick verification doesn't work properly.
ParQuick=yes

# Memory limit for par-repair buffer (megabytes).
#
# Set the amount of RAM that the par-checker may use during repair. Having
# the buffer as big as the total size of all damaged blocks allows for
# the optimal repair speed. The option sets the maximum buffer size, the
# allocated buffer can be smaller.
#
# If you have a lot of RAM set the option to few hundreds (MB) for the
# best repair performance.
ParBuffer=16

# Number of threads to use during par-repair (0-99).
#
# On multi-core CPUs for the best speed set the option to the number of
# logical cores (physical cores + hyper-threading units). If you want
# to utilize the CPU to 100% you may need to add one or two additional threads
# to compensate for wait intervals used for thread synchronization.
#
# On single-core CPUs use only one thread.
#
# Set to '0' to automatically use all available CPU cores (may not
# work on old or exotic platforms).
ParThreads=0

# Files to ignore during par-check.
#
# List of file extensions, file names or file masks to ignore by
# par-rename and par-check. The entries must be separated with
# commas.
#
# The entries must be separated with commas. The entries can be file
# extensions, file names or file masks containing wildcard
# characters * and ?.
#
# If par-rename or par-check detect missing or damaged files they
# will ignore files matching this option and will not initiate
# repair. This avoids time costing repair for unimportant files.
#
# Example: .sfv, .nzb, .nfo
ParIgnoreExt=.sfv, .nzb, .nfo

# Check for renamed and missing files using par-files (yes, no).
#
# Par-rename restores original file names using information stored
# in par2-files. It also detects missing files (files listed in
# par2-files but not present on disk). When enabled the par-rename is
# performed as the first step of post-processing for every nzb-file.
#
# Par-rename is very fast and is highly recommended, especially if
# unpack is disabled.
ParRename=yes

# Check for renamed rar-files (yes, no).
#
# Rar-rename restores original file names using information stored
# in rar-files. When enabled the rar-rename is performed as one of the
# first steps of post-processing for every nzb-file.
#
# Rar-rename is useful for downloads not having par2-files or for
# downloads those files were renamed before creating par2-files. In
# both cases par-rename (option <ParRename>) can't rename files
# and the rar-rename makes it possible to unpack downloads which
# would fail otherwise.
RarRename=yes

# Directly rename files during downloading (yes, no).
#
# This is similar to par-renaming (option <ParRename>) but the files
# are renamed during downloading instead of post-processing stage. This
# requires some tricky handling of files and works only for healthy
# downloads.
DirectRename=no

# What to do if download health drops below critical health (delete, park,
# pause, none).
#
#  Delete - delete nzb-file from queue, also delete already downloaded files;
#  Park   - move nzb-file to history, keep already downloaded files. Commands
#           "Download remaining files" and "Retry failed articles" are available
#           for this nzb;
#  Pause  - pause nzb-file;
#  None   - do nothing (continue download).
#
# NOTE: For automatic duplicate handling option must be set to "Delete", "Park"
# or "None". If it is set to "Pause" you will need to manually move another
# duplicate from history to queue. See also option <DupeCheck>.
#
# NOTE: When option <ParScan> is set to "Dupe" the park-action is performed
# only if article completion is below 10% (empirical threshold). This is to
# improve efficiency of dupe par scan mode.
HealthCheck=park

# Maximum allowed time for par-repair (minutes).
#
# If you use NZBGet on a very slow computer like NAS-device, it may be good to
# limit the time allowed for par-repair. NZBGet calculates the estimated time
# required for par-repair. If the estimated value exceeds the limit defined
# here, NZBGet cancels the repair.
#
# To avoid a false cancellation NZBGet compares the estimated time with
# <ParTimeLimit> after the first 5 minutes of repairing, when the calculated
# estimated time is more or less accurate. But in a case if <ParTimeLimit> is
# set to a value smaller than 5 minutes, the comparison is made after the first
# whole minute.
#
# Value "0" means unlimited.
#
# NOTE: The option limits only the time required for repairing. It doesn't
# affect the first stage of parcheck - verification of files. However, the
# verification speed is constant, it doesn't depend on files integrity and
# therefore it is not necessary to limit the time needed for the first stage.
ParTimeLimit=0

# Pause download queue during check/repair (yes, no).
#
# Enable the option to give CPU more time for par-check/repair. That helps
# to speed up check/repair on slow CPUs with fast connection (e.g. NAS-devices).
#
# NOTE: If parchecker needs additional par-files it temporarily unpauses
# the queue.
#
# NOTE: See also options <ScriptPauseQueue> and <UnpackPauseQueue>.
ParPauseQueue=no


##############################################################################
### UNPACK                                                                 ###

# Unpack downloaded nzb-files (yes, no).
#
# Each download (nzb-file) has a post-processing parameter "Unpack". The option
# <Unpack> is the default value assigned to this pp-parameter of the download
# when it is added to queue.
#
# When nzb-file is added to queue it can have a category assigned to it. In this
# case the option <CategoryX.Unpack> overrides the global option <Unpack>.
#
# If the download is damaged and could not be repaired using par-files
# the unpacking is not performed.
#
# If the option <ParCheck> is set to "Auto" the program tries to unpack
# downloaded files first. If the unpacking fails the par-check/repair
# is performed and the unpack is executed again.
Unpack=yes

# Directly unpack files during downloading (yes, no).
#
# When active the files are unpacked during downloading instead of post-processing
# stage. This works only for healthy downloads. Damaged downloads are unpacked
# as usual during post-processing stage after par-repair.
#
# NOTE: This option requires unpack to be enabled in general via option <Unpack>.
# NOTE: For best results also activate option <DirectRename> and option <ReorderFiles>.
DirectUnpack=no

# Pause download queue during unpack (yes, no).
#
# Enable the option to give CPU more time for unpacking. That helps
# to speed up unpacking on slow CPUs.
#
# NOTE: See also options <ParPauseQueue> and <ScriptPauseQueue>.
UnpackPauseQueue=no

# Delete archive files after successful unpacking (yes, no).
UnpackCleanupDisk=yes

# Full path to unrar executable.
#
# Example: /usr/bin/unrar.
#
# The option can also contain extra switches to pass to unrar. To the
# here defined command line NZBGet adds the following switches:
#    x -y -p- -o+ *.rar ./_unpack/
#
# Switch "x" is added only if neither "x" nor "e" were defined in
# the option (this allows you to use switch "e" instead of "x"). switch
# "-o+" is added only if neither "-o+" nor "-o-" were defined
# in the command line. All other parameters are always added. Parameter
# "-p-" is replaced with "-ppassword" if a password is set for nzb-file.
#
# Examples:
# 1) ignore file attributes (permissions):
# /usr/bin/unrar x -ai;
# 2) decrease priority of unrar-process:
# nice -n 19 unrar.
#
# For other useful switches refer to unrar documentation.
#
# If unrar is in your PATH you may leave the path part and set only
# the executable name ("unrar" on POSIX or "unrar.exe" on Windows).
UnrarCmd=unrar

# Full path to 7-Zip executable.
#
# Example: /usr/bin/7z.
#
# Similar to option <UnrarCmd> this option can also include extra switches.
#
# If 7-Zip binary is in your PATH you may leave the path part and set only
# the executable name ("7z" or "7za" on POSIX or "7z.exe" on Windows).
SevenZipCmd=7z

# Files to delete after successful download.
#
# List of file extensions, file names or file masks to delete after
# successful download. If either unpack or par-check fail the cleanup is
# not performed. If download doesn't contain archives nor par-files
# the cleanup is performed if the health is 100%. If parameter "unpack"
# is disabled for that nzb-file the cleanup isn't performed.
#
# The entries must be separated with commas. The entries can be file
# extensions, file names or file masks containing wildcard
# characters * and ?.
#
# Example: .par2, .sfv
ExtCleanupDisk=.par2, .sfv

# Files to ignore during unpack.
#
# List of file extensions to ignore when unpacking archives or renaming
# obfuscated archive files. The entries must be separated with commas.
#
# Archive files with non standard extensions belong to one of two categories: they
# are either obfuscated files or files with special purposes which should not be
# unpacked. List the files of second type here to avoid attempts to unpack them.
#
# This option has effect on two post-processing stages.
#
# First, during rar-rename (option <RarRename>) rar-files with non-standard
# extensions are renamed back to rar-extension, which is required for successful
# unpacking. Files with extensions listed here will not be renamed.
#
# Second, if during unpack no rar-files are found but instead rar-archives
# with non-rar extensions are found the unpack fails. For files listed here
# no unpack failure occurs and download is considered not having archive
# files and be successful.
#
# Example: .cbr
UnpackIgnoreExt=.cbr

# Path to file containing unpack passwords.
#
# If the option is set the program will try all passwords from the file
# when unpacking the archives. The file must be a text file containing
# one password per line.
#
# If an nzb-file has a defined password (in the post-processing settings)
# then the password-file is not used for that nzb-file.
#
# NOTE: Trying multiple passwords is a time consuming task. Whenever possible
# passwords should be set per nzb-file in their post-processing settings.
UnpackPassFile=


##############################################################################
### EXTENSION SCRIPTS                                                      ###

# List of active extension scripts for new downloads.
#
# Extension scripts associated with nzb-files are executed before, during
# or after download as defined by script developer.
#
# Each download (nzb-file) has its own list of extension scripts; the list
# can be viewed and changed in web-interface in download details dialog or
# via API. Option <Extensions> sets defaults for new downloads; changes
# to option <Extensions> do not affect downloads which are already in queue.
#
# When nzb-file is added to queue it can have a category assigned to it. In this
# case option <CategoryX.Extensions> (if not empty) have precedence and
# defines the scripts for that nzb-file; consequently global option <Extensions>
# has no effect for that nzb-file.
#
# Certain extensions work globally for the whole program instead of
# per-nzb basis. Such extensions are activated once and cannot be overriden
# per category or per nzb.
#
# The scripts in the list must be separated with commas or semicolons. All
# scripts must be stored in directory set by option <ScriptDir> and
# paths relative to <ScriptDir> must be entered here.
#
# Example: Cleanup.sh, Move.sh, EMail.py.
#
# NOTE: The script execution order is controlled by option <ScriptOrder>, not
# by their order in option <Extensions>.
#
# NOTE: For the list of interesting extension scripts see
# http://nzbget.net/catalog-of-extension-scripts.
#
# NOTE: For developer documentation visit http://nzbget.net/extension-scripts.
Extensions=videosort/VideoSort.py

# Execution order for extension scripts.
#
# If you assign multiple scripts to one nzb-file, they are executed in the
# order defined by this option.
#
# The scripts in the list must be separated with commas or semicolons. All
# scripts must be stored in directory set by option <ScriptDir> and
# paths relative to <ScriptDir> must be entered here.
#
# Example: Cleanup.sh, Move.sh.
ScriptOrder=

# Pause download queue during executing of postprocess-script (yes, no).
#
# Enable the option to give CPU more time for postprocess-script. That helps
# to speed up postprocess on slow CPUs with fast connection (e.g. NAS-devices).
#
# NOTE: See also options <ParPauseQueue> and <UnpackPauseQueue>.
ScriptPauseQueue=no

# Shell overrides for script interpreters.
#
# By default extension scripts are executed as normal programs. The system finds
# an associated interpreter automatically. If for some reason that doesn't work
# properly you can provide shell overrides here.
#
# This option contains a comma separated list of shell overrides per
# file extension. A shell override consists of file extension (starting with
# dot) followed by equal sign and the full path to script interpreter.
#
# Example: .py=/usr/bin/python2;.py3=/usr/bin/python3;.sh=/usr/bin/bash.
ShellOverride=

# Minimum interval between queue events (seconds).
#
# Extension scripts can opt-in for progress notifcations during
# download. For downloads containing many small files the events can
# be fired way too often increasing load on the system due to script
# execution.
#
# This option allows to reduce the number of calls of scripts by
# skipping "file-downloaded"-events if the previous call for the same
# download (nzb-file) were performed a short time ago (as defined by
# the option).
#
# Value "-1" disables "file-downloaded"-events. Scripts are still
# notified on other events (such as "nzb-added" or "nzb-downloaded").
EventInterval=0
Feed1.Name=dog
Feed1.URL=https://dognzb.cr/rss.cfm?r={{ secretJSON | dig "nzbget" "feedApiKey" "" }}&t=9000
Feed1.Filter=
Feed1.Interval=15
Feed1.Backlog=yes
Feed1.PauseNzb=no
Feed1.Category=
Feed1.Priority=0
Feed1.Extensions=
ControlUsername=nzbget
videosort/VideoSort.py:MoviesDir=${DestDir}/movies
videosort/VideoSort.py:SeriesDir=${DestDir}/series
videosort/VideoSort.py:DatedDir=${DestDir}/series
videosort/VideoSort.py:OtherTvDir=${DestDir}/series
videosort/VideoSort.py:TvCategories=
videosort/VideoSort.py:VideoExtensions=.mkv,.avi,.divx,.xvid,.mov,.wmv,.mp4,.mpg,.mpeg,.vob,.iso
videosort/VideoSort.py:SatelliteExtensions=.srt,.sub
videosort/VideoSort.py:MinSize=100
videosort/VideoSort.py:MoviesFormat=%.t_%y
videosort/VideoSort.py:SeriesFormat=%s.n/s%s/e%0e_%e.n
videosort/VideoSort.py:MultipleEpisodes=range
videosort/VideoSort.py:EpisodeSeparator=E
videosort/VideoSort.py:SeriesYear=yes
videosort/VideoSort.py:DatedFormat=%sn/%sn_%y_%0m%0d
videosort/VideoSort.py:OtherTvFormat=%t
videosort/VideoSort.py:LowerWords=the,of,and,at,vs,a,an,but,nor,for,on,so,yet
videosort/VideoSort.py:UpperWords=III,II,IV
videosort/VideoSort.py:DNZBHeaders=yes
videosort/VideoSort.py:PreferNZBName=no
videosort/VideoSort.py:Overwrite=no
videosort/VideoSort.py:Cleanup=yes
videosort/VideoSort.py:Preview=no
videosort/VideoSort.py:Verbose=no
