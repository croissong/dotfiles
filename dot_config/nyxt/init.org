# -*- eval: (babel-tangle-mode 1) -*-
#+PROPERTY: header-args :results silent :tangle "./init.lisp"
* Keybindings
#+begin_src lisp
(defvar *my-keymap* (make-keymap "my-map"))
(define-key *my-keymap*
    "M-d" 'switch-buffer
    "M-q" 'delete-buffer
    "C-q" 'delete-current-buffer
    "C-M-q" 'reopen-buffer
    "C-ö" 'switch-buffer-previous
    "C-#" 'switch-buffer-next
    "M-ö" 'nyxt/web-mode:history-backwards
    "M-#" 'nyxt/web-mode:history-forwards
    "C-M-ö" 'nyxt/web-mode:history-all-query
    "C-M-#" 'nyxt/web-mode:jump-to-heading
    "C-M-d" 'set-url-new-buffer
    "C-d" 'set-url
    "C-space" 'nyxt/visual-mode:visual-mode
    "C-l l" 'copy-url

    "M-return" 'nyxt/web-mode:follow-hint

    "C-e" 'set-url-from-bookmark
    "C-M-e e" 'bookmark-current-url

    "M-s" 'query-selection-in-search-engine
    "C-s" 'nyxt/web-mode:search-buffer
    "C-M-s" 'nyxt/web-mode:remove-search-hints)

(define-mode my-mode ()
  "Dummy mode for the custom key bindings in `*my-keymap*'."
  ((visible-in-status-p nil)
   (keymap-scheme (keymap:make-scheme
                   scheme:emacs *my-keymap*))))


(define-configuration buffer
    ((default-modes (append '(emacs-mode my-mode) %slot-default%))))
(define-configuration web-buffer
    ((default-modes (append '(blocker-mode) %slot-default%))))



(defvar *my-prompt-keymap* (make-keymap "my-prompt-map"))
(define-key *my-prompt-keymap*
    "M-ä" 'nyxt/prompt-buffer-mode:select-next
    "M-ü" 'nyxt/prompt-buffer-mode:select-previous
    "C-y" 'nyxt/prompt-buffer-mode:paste
    "M-w" 'nyxt/prompt-buffer-mode:copy-selection)
(define-mode my-prompt-mode ()
  "Dummy mode for the custom key bindings in `*my-keymap*'."
  ((keymap-scheme (keymap:make-scheme
                   scheme:cua *my-prompt-keymap*))))

(define-configuration (prompt-buffer)
    ((default-modes (append '(my-prompt-mode) %slot-default%))))

(define-configuration buffer
  ((search-engines (list
                    (make-instance 'search-engine
                                   :shortcut "wiki"
                                   :search-url "https://en.wikipedia.org/w/index.php?search=~a"
                                   :fallback-url "https://en.wikipedia.org/")
                    (make-instance 'search-engine
                                   :shortcut "gh"
                                   :fallback-url "https://github.com"
                                   :search-url "https://github.com/search?q=~a")
                    (make-instance 'search-engine
                                   :shortcut "t"
                                   :fallback-url "https://translate.google.com/?hl=de&tab=TT&sl=de&tl=en&op=translate"
                                   :search-url "https://translate.google.com/?hl=de&sl=de&tl=en&text=~a%0A&op=translate")
                    (make-instance 'search-engine
                                   :shortcut "g"
                                   :fallback-url "https://google.com"
                                   :search-url "https://google.com/search?q=~a")))))


(define-configuration buffer
  ((override-map (let ((map (make-keymap "override-map")))
                   (define-key map
                     "M-x" 'execute-command)))))
#+end_src
* Commands
#+begin_src lisp
(define-command play-video-in-current-page (&optional (buffer (current-buffer)))
  "Play video in the currently open buffer."
  (uiop:run-program (list "mpv" (render-url (url buffer)))))
#+end_src
* Proxy
#+begin_src lisp
(define-configuration nyxt/proxy-mode:proxy-mode
  ((nyxt/proxy-mode:proxy (make-instance 'proxy
                                         :url (quri:uri "http://localhost:8118")
                                         :proxied-downloads-p t))))

(define-configuration buffer
    ((request-resource-hook (reduce #'hooks:add-hook
                                    (list (url-dispatching-handler
                                           'wbench-dispatcher
                                           (match-host "smarthub-wbench.workbench.telekom.de")
                                           (lambda (url)
                                             (nyxt/proxy-mode:proxy-mode :activate t)
                                             url)
                                           ))
                                    :initial-value %slot-default%))))
#+end_src
* extensions
#+begin_src lisp
(asdf:load-system :demeter)
#+end_src
